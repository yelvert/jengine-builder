var __ = require('./underscore.js');

var events = module.exports = {
  _eventSplitter: function(eventString) {
    eventString || (eventString = "");
    var match = eventString.match(/^(\w*)(.\w*)?$/);
    var name = match[1];
    var namespace = match[2];
    __.isString(name) || (name = '');
    __.isString(namespace) || (namespace = '');
    return {name: match[1], namespace: namespace};
  },

  _eventMaker: function(eventString, callback, context) { //For lack of a better name.
    var ev = this._eventSplitter(eventString);
    ev.name.length || (delete ev.name);
    ev.namespace.length || (delete ev.namespace);
    if (__.isFunction(callback)) {
      ev.callback = callback;
      if (__.isObject(context)) {
        ev.context = context;
      }
    } else if (__.isObject(callback)) {
      ev.context = context;
    }
    return ev;
  },
  
  on: function(eventString, callback, context) {
    this._events || (this._events = []);
    var events = this._events;
    var ev = this._eventMaker(eventString, callback, context);
    if (__.isFunction(callback)) {
      events.push(ev);
    }
    return this;
  },

  off: function(eventString, callback, context) {
    var events = (this._events || []);
    var ev = this._eventMaker(eventString, callback, context);
    var _events = _(events);
    this._events = __.without.apply(_events, _events.where(ev));
    return this;
  },

  trigger: function(eventString, data) {
    var events = (this._events || []);
    var evFinder = this._eventMaker(eventString);
    __.chain(events).where(evFinder).each(function(ev) {
      ev.callback.apply((ev.context || this), [this, data]);
    }.bind(this));
    return this;
  }
};