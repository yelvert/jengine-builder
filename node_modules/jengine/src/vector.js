JEngine.Vector = JEngine.Utils.Obj.extend({
  constructor: function Vector() {
    var vector = this.vectorFromArgs.apply(this, arguments);
    this.x = vector.x;
    this.y = vector.y;
  },

  vectorFromArgs: function vectorFromArgs() {
    var args = _.toArray(arguments);
    var x, y;
    if (args[0] instanceof JEngine.Vector || (_.isObject(args[0]) && !_.isArray(args[0]))) {
      x = args[0].x;
      y = args[0].y;
    } else if (_.isNumber(args[0])) {
      if (_.isNumber(args[1])) {
        x = args[0];
        y = args[1];
      } else {
        x = y = args[0];
      }
    } else {
      throw JEngine.Vector.InvalidError;
    }
    return {x: x, y: y};
  },

  add: function add() {
    var vector = this.vectorFromArgs.apply(this, arguments);
    return new JEngine.Vector(this.x + vector.x, this.y + vector.y);
  },

  subtract: function subtract() {
    var vector = this.vectorFromArgs.apply(this, arguments);
    return new JEngine.Vector(this.x - vector.x, this.y - vector.y);
  },

  multiply: function multiply() {
    var vector = this.vectorFromArgs.apply(this, arguments);
    return new JEngine.Vector(this.x * vector.x, this.y * vector.y);
  },

  divide: function divide() {
    var vector = this.vectorFromArgs.apply(this, arguments);
    return new JEngine.Vector(this.x / vector.x, this.y / vector.y);
  },

  dot: function dot() {
    var vector = this.vectorFromArgs.apply(this, arguments);
    return this.x * vector.x   + this.y * vector.y;
  },

  cross: function cross() {
    var vector = this.vectorFromArgs.apply(this, arguments);
    return this.x * vector.y - this.y * vector.x;
  },

  length: function length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  },

  unit: function unit() {
    return this.divide(this.length());
  },

  turnLeft: function turnLeft() {
    return new JEngine.Vector(-this.y, this.x);
  },

  turnRight: function turnRight() {
    return new JEngine.Vector(this.y, -this.x);
  },

  rotate: function rotate(angle) {
    return new JEngine.Vector(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle));
  },

  angle: function angle() {
    return Math.atan2(this.y, this.x);
  },

  rotateAround: function rotateAround(vector, angle) {
    return this.subtract(vector).rotate(angle).add(vector);
  }

}, {
  InvalidError: new Error("Vector must have an 'x' and 'y'!")
});