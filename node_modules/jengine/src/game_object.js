JEngine.GameObject = JEngine.Utils.Obj.extend({
  constructor: function GameObject(scene, manifest) {
    this.scene = scene;
    this.game = this.scene.game;
    this.on('update', this.update);
    this.on('fixedUpdate', this.fixedUpdate);
    this.setManifest(manifest);
  },

  update: function update(frameTime) {
    console.log('Update: '+frameTime);
  },

  fixedUpdate: function fixedUpdate(frameTime) {
    console.log('Fixed Update: '+frameTime);
  },

  setManifest: function setManifest(game_object) {
    if (game_object) {
      if (_.isObject(game_object)) {
        this.manifest = game_object instanceof JEngine.GameObject ? game_object.manifest : game_object;
        this.load();
      } else {
        var self = this;
        this.game.getJSON('game_object', game_object, function(json) {
          self.manifest = json;
          self.load();
        });
      }
    } else {
      this.load();
    }
  },

  load: function load() {
    console.log(this.manifest);
    return this;
  },

  translate: function translate(position) {
    this.position = position;
    return this;
  },

  rotate: function rotate(rotation) {
    this.rotation = rotation;
    return this;
  },

  scale: function scale(scale) {
    this.scale = scale;
    return this;
  }
}, {
  Create: function Create(manifest, position, rotation, scale) {
    var gameObject = new this(manifest);
    gameObject.translate(position);
    gameObject.rotate(rotation);
    gameObject.scale(scale);
    return gameObject;
  }
});