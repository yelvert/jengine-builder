JEngine.Scene = JEngine.Utils.Obj.extend({
  constructor: function Scene(game, scene, options) {
    if (this instanceof JEngine.Scene) {
      this._super(options);
      this.game = game;
      this.gameObjects = [];
      this.setManifest(scene);
    } else {
      if (scene instanceof JEngine.Scene) {
        scene.game = game;
        return scene;
      } else {
        return new JEngine.Scene(game, scene, options);
      }
    }
  },

  setManifest: function setManifest(scene) {
    if (scene) {
      if (_.isObject(scene)) {
        this.manifest = scene instanceof JEngine.Scene ? scene.manifest : scene;
        this.load();
      } else {
        var self = this;
        this.game.getJSON('scene', scene, function(json) {
          self.manifest = json;
          self.load();
        });
      }
    } else {
      this.load();
    }
  },

  load: function load() {
    console.log(this.manifest);
    return this;
  },

  start: function start() {
    if (!this.game) throw new Error('JEngine Scene cannot start without a game.');
    var self = this;
    var lastUpdateFrameTime = (new Date).valueOf();
    var lastFixedUpdateFrameTime = lastUpdateFrameTime;
    
    self.updateLoop = function() {
      var newUpdateFrameTime = (new Date).valueOf();
      var frameTime = newUpdateFrameTime - lastUpdateFrameTime;
      lastUpdateFrameTime = newUpdateFrameTime;
      _.each(self.gameObjects, function(gameObject) {
        gameObject.trigger('update', frameTime);
      });
      // this.draw();
      setTimeout(self.updateLoop, 0);
    };

    self.fixedUpdateLoop = function() {
      var newFixedUpdateFrameTime = (new Date).valueOf();
      var frameTime = newFixedUpdateFrameTime - lastFixedUpdateFrameTime;
      lastFixedUpdateFrameTime = newFixedUpdateFrameTime;
      _.each(self.gameObjects, function(gameObject) {
        gameObject.trigger('fixedUpdate', frameTime);
      });
      // this.draw();
      JEngine.Utils.requestAnimationFrame(self.fixedUpdateLoop);
    };
    self.fixedUpdateLoop();
    self.updateLoop();

    return self;
  }
}, {
  Load: function Load(scene, options) {
    return JEngine.Scene(false, scene, options);
  }
});