var Scene = module.exports = JEngine.Utils.Obj.extend({
  constructor: function(engine, scene, options) {
    if (this instanceof JEngine.Scene) {
      this.engine = engine;
      this._super(options);
      this.setManifest(scene);
    } else {
      if (scene instanceof JEngine.Scene) {
        scene.engine = engine;
        return scene;
      } else {
        return new JEngine.Scene(engine, scene, options);
      }
    }
  },

  setManifest: function(scene) {
    if (scene) {
      if (_.isObject(scene)) {
        this.manifest = scene;
        this.load();
      } else {
        var self = this;
        this.engine.getJSON('scene', scene, function(json) {
          self.manifest = json;
          this.load();
        });
      }
    } else {
      this.load();
    }
  },

  load: function() {
    console.log(this.manifest);
    return this;
  },

  start: function() {
    if (!this.engine) throw new Error('JEngine Scene cannot start without an engine.');
    return this;
  }
}, {
  Load: function(scene, options) {
    return JEngine.Scene(false, scene, options);
  }
});