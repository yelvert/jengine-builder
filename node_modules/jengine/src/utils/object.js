JEngine.Utils.Obj = function Obj(options) {
  this.uid = _.uniqueId(this.constructor.name || 'u');
  this.handleOptions(options);
};

_.extend(JEngine.Utils.Obj, {
  extend: function (protoProps, staticProps) {
    var parent = this,
        child,
        Parent;
    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function () { return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    Parent = function () { this.constructor = child; };
    Parent.prototype = parent.prototype;
    child.prototype = new Parent();

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) {
      _.extend(child.prototype, protoProps);
    }

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent;
    child.prototype.__super__ = parent.prototype;

    return child;
  }
});

_.extend(JEngine.Utils.Obj.prototype, JEngine.Utils.Events, JEngine.Utils.Hierarchy, {
  handleOptions: function(options, defaults) {
    defaults || (defaults = this.defaults || {});
    options = options || {};
    this.options = _.defaults(options, defaults);
    return this;
  },

  _super: function () {
    var self = this,
        caller = arguments.callee.caller,
        funcName = _.detect(_.functions(self), function (attr) {
          return self[attr] === caller;
        }),
        args = arguments.length > 0 ? arguments : caller.arguments;
    if (funcName) {
      if (self.__super__) {
        var sClass = this.__super__;
        if (typeof sClass[funcName] === 'function') {
          sClass[funcName].apply(this, args);
        } else {
          console.warn('Super method for "' + funcName + '" not found!');
        }
      }
    }
  },

  clone: function() {
    
  }
});