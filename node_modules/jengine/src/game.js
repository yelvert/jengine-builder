var Game = JEngine.Game = JEngine.Utils.Obj.extend({
  constructor: function(options) {
    this._super();
    this.rootUrl = this.options.rootUrl;
    this.urlPaths = {};
    this.processPackageJSON();
    this.setElement(this.options.element);
    this.start();
  },

  defaults: {
    element: 'body',
    rootUrl: document.location.origin,
    urlPaths: {
      root: '',
      scene: 'scene'
    },
  },

  processPackageJSON: function() {
    var self = this;
    this.getJSON('package.json', {
      async: false,
      success: function(json) {
        self.manifest = json;
        self.urlPaths = _.extend({}, self.urlPaths, self.options.urlPaths, self.manifest.urlPaths);
      }
    });
    return this;
  },

  getJSON: function(type, path, options) {
    var url;
    if (!options) {
      if (_.isObject(path)) {
        options = path;
        path = type;
        url = this.urlFor(path);
      } else {
        options = {};
        url = this.urlFor(type, path);
      }
    } else {
      url = this.urlFor(type, path);
    }
    options.url = url;
    options.dataFilter = function(data, dataType) {
      if ($.isPlainObject(data)) {
        return data
      }
      if (_.isString(data)) {
        try {
          return JSON.parse(data);
        } catch (err) {
          throw {
            name: 'Bad JSON Response', 
            message: 'Failed to parse response from '+ url
          };
        }
      } else {
        throw {
          name: 'Bad JSON Response', 
          message: 'Response from '+ url +' was in the wrong format ['+ dataType +']'
        };
      }
    };
    return $.ajax(options);
  },

  urlFor: function(type, path) {
    if (!path) {
      path = type;
      type = 'root'
    }
    return _.compact([this.rootUrl, this.urlPaths[type], path]).join('/');
  },

  setElement: function(value) {
    var elem = $(value);
    this.$element = elem;
    this.element = elem.get(0);
    this.$element.data({jengine: this});
    return this;
  },

  $: function(selector) {
    return this.$element.find(selector);
  },

  start: function() {
    this.scene || this.loadScene(this.options.scene || this.manifest.scene);
    this.scene.start();
    return this;
  },

  loadScene: function(scene) {
    this.scene && this.scene.unload();
    this.scene = new JEngine.Scene(this, scene);
    return this;
  }
});