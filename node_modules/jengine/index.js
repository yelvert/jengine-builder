var defaults = {
  element: 'body'
};

var Obj = require('object');

window.JEngine = module.exports = Obj.extend({
  constructor: function(options) {
    options = options || {};
    this.options = _.defaults(options, defaults);
    this.setElement(this.options.element);
  },

  setRenderer: function() {
    if (this.options.renderer) {
      this.renderer = new this.options.renderer(this);
    } else {
      if (this.supportsWebGL()) {
        this.renderer = new JEngine.Renderers.WebGL(this);
      } else if (this.supportsCanvas()) {
        this._renderer = JEngine.Renderers.Canvas;
      } else {
        throw 'Canvas nor WebGL are supported!'
      }
    }
    return this;
  },

  setElement: function(value) {
    var elem = $(value);
    elem.find('canvas').length == 0 && elem.append('<canvas />');
    this.element = elem.get(0);
    this.$element = elem;
    this.$element.data({jengine: this});
    this.$canvas = this.$('canvas');
    this.canvas = this.$canvas.get(0);
    this.setRenderer();
    return this;
  },

  $: function() {
    var args = Array.prototype.slice.apply(arguments);
    return this.$element.find(args[0], args.slice(1));
  },

  supportsWebGL: function() {
    try {
      if (this.canvas.getContext('webgl') || this.canvas.getContext('experimental-webgl')) {
        return true;
      }
    } catch (err) {
      return false;
    }
  },

  supportsCanvas: function() {
    try {
      if (this.canvas.getContext('2d')) {
        return true;
      }
    } catch (err) {
      return false;
    }
  }
});

browserRequire('./src/utils');
browserRequire('./src/renderers');