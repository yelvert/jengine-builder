var path = require('path'),
    fs = require('fs')
;

module.exports = Backbone.View.extend({
  name: 'Project Create',

  el: 'body',

  template: requireTemplate('projects/create'),

  events: {
    'submit form': 'create',
    'reset form': 'cancel',
    'change #name .form-control': 'validateName',
    'blur #name .form-control': 'validateName',
    'change #location .form-control': 'validateLocation',
    'blur #location .form-control': 'validateLocation'
  },

  initialize: function () {
    _.bindAll(this, 'render', 'create', 'cancel', 'validateName', 'validateLocation');
  },

  render: function () {
    this.$el.html(this.template());
    return this;
  },

  create: function (e) {
    e && e.preventDefault();
    this.validateName();
    this.validateLocation();
    if (this.$('.form-group.has-error').length > 0) {
      return false;
    }
    JEngineBuilder.Project.create({
      name: this.$('#name .form-control').val(),
      path: this.$('#location .form-control').val()
    });
    return this;
  },

  cancel: function(e) {
    e && e.preventDefault();
    Backbone.history.navigate('', {trigger: true});
    return this;
  },

  validateName: function() {
    var val = this.$('#name .form-control').val() || "";
    if (/[A-Za-z0-9\-\_]+/.test(val)) {
      this.$('#name').fieldSuccess();
    } else {
      this.$('#name').fieldError();
    }
  },

  validateLocation: function() {
    var location = this.$('#location .form-control')[0].files[0];
    if (!location) {
      this.$('#location').fieldError();
      return;
    }
    location = location.path;
    if (fs.existsSync(location) && fs.readdirSync(location).length === 0) {
      this.$('#location').fieldSuccess();
    } else {
      this.$('#location').fieldError();
    }
  }
});